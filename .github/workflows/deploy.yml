name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version of the release to deploy"
        required: true
        type: string

jobs:
  check-image:
    runs-on: ubuntu-latest
    steps:
      - name: Check image in Container Registry
        id: check_image
        run: |
          IMAGE_TAG=${{ github.event.inputs.version }}_latest
          # Log in to Yandex Container Registry
          echo "${{ secrets.YC_TOKEN }}" | docker login -u oauth --password-stdin cr.yandex
          # Check if the image exists
          if ! docker manifest inspect cr.yandex/fv4fmp7jhr0483orh6e9/app:${IMAGE_TAG} > /dev/null 2>&1; then
            echo "Image cr.yandex/fv4fmp7jhr0483orh6e9/app:${IMAGE_TAG} does not exist."
            exit 1
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: check-image
    steps:
      - name: Deploy Docker image to production
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          IMAGE_TAG: ${{ github.event.inputs.version }}_latest
        run: |
          # Create a temporary SSH key file
          echo "$SSH_PRIVATE_KEY" > id_rsa
          chmod 600 id_rsa

          # SSH into the production server and run the Docker container
          ssh -i id_rsa $SSH_USER@$SSH_HOST << 'EOF'
            docker pull cr.yandex/fv4fmp7jhr0483orh6e9/app:${IMAGE_TAG}
            docker run -d -p 80:80 cr.yandex/fv4fmp7jhr0483orh6e9/app:${IMAGE_TAG}
          EOF

  comment-issue:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Comment on GitHub Issue
        uses: actions/github-script@v6
        with:
          script: |
            const version = '${{ github.event.inputs.version }}';
            const deployer = '${{ github.actor }}';
            const date = new Date().toISOString();

            const issueComment = `**Production Release Deployed**\n\n- **Version:** ${version}\n- **Date:** ${date}\n- **Deployer:** ${deployer}`;

            // Find the Issue to comment on (assuming you have the issue number)
            const issue_number = 1; // Update with the actual issue number or find it dynamically

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: issueComment
            });
